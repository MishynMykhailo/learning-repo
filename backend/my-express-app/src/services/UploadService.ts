import multer, { StorageEngine, FileFilterCallback } from "multer";
import path from "path";
import fs from "fs";
import { Request } from "express";

export class UploadService {
  private uploadDir: string;
  private maxSizeMb: number;
  private allowedTypes: string[];

  constructor(
    uploadDir = path.resolve(__dirname, "../uploads"),
    maxSizeMb = 5,
    allowedTypes = ["image/jpeg", "image/png", "application/pdf"]
  ) {
    this.uploadDir = uploadDir;
    this.maxSizeMb = maxSizeMb;
    this.allowedTypes = allowedTypes;
    this.ensureUploadDir();
  }

  private ensureUploadDir() {
    if (!fs.existsSync(this.uploadDir)) {
      fs.mkdirSync(this.uploadDir, { recursive: true });
    }
  }

  private storage(): StorageEngine {
    return multer.diskStorage({
      destination: (_, __, cb) => cb(null, this.uploadDir),
      filename: (_, file, cb) => {
        const ext = path.extname(file.originalname);
        const base = path.basename(file.originalname, ext);
        const timestamp = Date.now();
        cb(null, `${base}-${timestamp}${ext}`);
      },
    });
  }

  private fileFilter(): (
    req: Request,
    file: Express.Multer.File,
    cb: FileFilterCallback
  ) => void {
    return (_, file, cb) => {
      if (this.allowedTypes.includes(file.mimetype)) {
        cb(null, true);
      } else {
        cb(new Error("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞"));
      }
    };
  }

  public single(fieldName: string) {
    return multer({
      storage: this.storage(),
      limits: { fileSize: this.maxSizeMb * 1024 * 1024 },
      fileFilter: this.fileFilter(),
    }).single(fieldName);
  }

  public array(fieldName: string, maxCount = 5) {
    return multer({
      storage: this.storage(),
      limits: { fileSize: this.maxSizeMb * 1024 * 1024 },
      fileFilter: this.fileFilter(),
    }).array(fieldName, maxCount);
  }

  public fields(fieldMap: { name: string; maxCount: number }[]) {
    return multer({
      storage: this.storage(),
      limits: { fileSize: this.maxSizeMb * 1024 * 1024 },
      fileFilter: this.fileFilter(),
    }).fields(fieldMap);
  }
}

// üß© 1. –°–æ–∑–¥–∞–π —Å–µ—Ä–≤–∏—Å UploadService
// –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: services/UploadService.ts

// –≠—Ç–æ TypeScript-–∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π:

// —Ö—Ä–∞–Ω–∏—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ (uploadDir);

// –∑–∞–¥–∞—ë—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (maxSizeMb);

// –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ MIME-—Ç–∏–ø—ã (allowedTypes);

// –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É multer.diskStorage, fileFilter, limits.

// ‚öôÔ∏è 2. –í –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ:
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:

// –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ../../uploads);

// –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5);

// –º–∞—Å—Å–∏–≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö MIME-—Ç–∏–ø–æ–≤.

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ fs.mkdirSync.

// üóÇ 3. –ú–µ—Ç–æ–¥ storage()
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é multer.diskStorage:

// —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –≤ uploadDir;

// –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è –≤–∏–¥–∞ –∏–º—è-—Ñ–∞–π–ª–∞-timestamp.—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ.

// üîí 4. –ú–µ—Ç–æ–¥ fileFilter()
// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞;

// –†–∞–∑—Ä–µ—à–∞–µ—Ç —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã (jpeg, png, pdf);

// –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —Å –æ—à–∏–±–∫–æ–π.

// üß™ 5. –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
// single(fieldName) ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–∞–Ω–∞–ª–æ–≥ .single() –≤ multer);

// array(fieldName, maxCount) ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Å–∏–≤–∞ —Ñ–∞–π–ª–æ–≤;

// fields([{ name, maxCount }, ...]) ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–µ–π —Å —Ñ–∞–π–ª–∞–º–∏.

// –ö–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç middleware, –≥–æ—Ç–æ–≤–æ–µ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ router.post().

// üîå 6. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä–æ—É—Ç–∞—Ö
// –í —Ä–æ—É—Ç–µ –Ω—É–∂–Ω–æ:

// –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å UploadService;

// —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä: const uploader = new UploadService();

// –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ä–æ—É—Ç–µ: router.post(..., uploader.single("file"), ...)

// üí° –ü—Ä–∏–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ routes/upload.ts
// ts
// –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
